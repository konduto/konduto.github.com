---
en:
  parameter: Parameter
  description: Description
  object: Object
  required: (required)
  required_if_flight: (required if type=flight)
  required_if_bus: (required if type=bus)
  optional: (optional)
  recommended: Recommended
  home: Home
  product: Product
  introduction:
    title: Introduction
    content: |
      Welcome! This document will explain how to integrate with **Konduto**'s
      anti-fraud service so you can begin to spot fraud on your e-commerce
      website.

      Our service uses the visitor's behavior to analyze browsing patterns and
      detect fraud. You will need to add a **JavaScript** snippet
      to your website and tag your pages, so we can see your visitors, and call
      our **REST API** to send purchases, so we can analyze them.

      We are constantly improving this document and we appreciate any feedback
      you have. You can drop us a line at <hi@konduto.com> with questions and
      suggestions about how to improve it.

  collector:
    title: Event collector
    content: |
      We capture the customer's buying behavior to spot fraudulent activities.
      You will need to paste a JavaScript snippet at the bottom of your website
      so we can receive this data and analyze it.

      This snippet **does not** affect the performance of your website and is
      invisible to your visitor.
      

    code:
      paste: "Paste this just before your closing **`</body>`** tag:"
      comment: Set your public key so we know it's you
      getvisitor: "Recover our visitor ID:"
      setcustomer: "Send your own customer ID:"
      sendevent: "Send a navigation event manually:"


    methods:
      title: Identifying a visitor
      content: |
        There are two ways of tying an anonymous visit with a purchase. The
        *preferred* way is to set your own **customer ID**, a unique identifier
        for each logged in customer. The other is through our **visitor ID**,
        generated by us for that session.

        You can choose either form of identification, according to your
        preference or requirements.


  tags: 
    title: Page tags
    content: |      
      Page tagging allows us to have a deeper understanding of the content you
      are displaying on your website. This will help us determine what a visitor
      is seeing and doing on your page and will greatly increase our algorithms
      precision.

      It is **highly recommended** you tag your pages if you can.

    table:
      home: Website home
      product: Product view page
      search: Search results
      account: Customer account page
      password_reset: Reset password page
      account_creation: New account creation page
      category: Product category
      basket: Shopping cart view
      checkout: Checkout step
      kdt_product: Product details

    basic:
      title: Using meta tags (preferred)
      content: |     
        To tag a page add our `<meta>` tags to your header. They will tell us
        what kind of page you are serving and, optionally, what product or
        category of products are displayed there.


    advanced:
      title: Using JavaScript (advanced)
      content: |
        There are cases where you don't have the ability to use <meta> tags,
        such as a [Google Tag Manager](http://www.google.com/tagmanager/)
        implementation.

        For these cases you can use our own JavaScript to send navigation
        events. **This is an advanced implementation**, so make sure this is
        the right way for you.


      more_title: "How to enable advanced events"
      more:
        "In this mode our JavaScript **does not send navigation events
        automatically**. Instead it expects that **you** send the event when
        the page loads. You need to follow these steps to send events manually:
        <br /><br /><br />
        **1. Disable sending events automatically**
        <br /><br />
        You must set the `post_on_load` variable to `false` in our snippet, as
        the example shows.
        <br /><br /><br />
        **2. Send event via JavaScript**
        <br /><br />
        When the page is ready and you know it's context (*home*, *checkout*,
        *account*) you must send the `Konduto.sendEvent()` method, passing the
        tags as parameters."


        
    code:
      password: "Password reset page"
      checkout: "Checkout page"
      product: "Product detail page"
      flight: "Air or bus ticket search"
      advanced: "Snippet with automatic events disabled"
      advanced_comment: "Automatic events disabled"
      advanced_sendEvent: "Event manually sent"


  helpers: 
    title: Helper libraries
    content: |
      We offer SDKs to help with the development effort as well as plugin
      integrations with common e-commerce platforms. Below you will find a list
      of the integrations available to date, which are hosted on our
      [Github](https://github.com/konduto) page.

      If you don't see your SDK or platform listed here please drop us a line at
      <hi@konduto.com>, we'd love to hear from you!


  authentication:
    title: API Authentication
    content: |
      We use the [HTTP Basic Auth]
      (https://en.wikipedia.org/wiki/Basic_access_authentication) standard to
      authenticate access to our API.

      In this type of authentication you must send an `Authorization` HTTP
      header that contains the word **Basic** followed by a Base64 of your
      private key.

      If you use one of our helper libraries then this process is already
      covered and you just need to set your key.

    code:
      how: How to build
      result: Result

  
  orders: 
    title: Orders API
    content: |
      When the customer places the order you must send us the purchase data to
      our REST API so we can analyze it. We respond in real time with a
      **recommendation** of what to do and a **score**, which is our confidence
      level.

      While many parameters are optional we recommend that you send as much as
      possible, because each data point makes a difference in the analysis.

      The billing address and credit card information are specially important,
      but we understand there are cases where you don't have it available.

    code:
      resources: Orders API Endpoints

    post:
      title: Send an order
      content: |
        You can send new transactions using the **POST** method and passing
        a JSON in the request's body.

        The request consists of a root object containing
        information related to the order as well as a `customer`,
        `billing`, `shipping` and `travel` objects and the
        `payment` and `shopping_cart` arrays.


      root:
        title: Order
        content: |
          The root of the Order object contains basic information about the
          purchase, such as order number, amount and currency.

        table:
          id:
            "Unique identifier for each order.<br />
            **Max. 100 chars, alphanumeric.**"
          visitor:
            "Visitor identifier obtained from our JavaScript snippet.<br />
            **Exactly 40 chars, alphanumeric.**"
          total_amount:
            "Total order amount.<br />**Max. 10 digits, number.**"
          shipping_amount:
            "Shipping and handling amount.<br />**Max. 10 digits, number.**"
          tax_amount:
            "Taxes amount.<br />**Max. 10 digits, number.**"
          currency:
            "Currency code with 3 letters
            ([ISO-4712](http://en.wikipedia.org/wiki/ISO_4217)).<br />
            **Exactly 3 chars, string.**"
          installments:
            "Number of installments in the payment plan.<br />
            **Max. 3 digits, number.**"
          ip: "Customer's IPv4 address.<br />**Max. 15 chars, string.**"
          analyze:
            "If `false` we take the transaction into account in future analyses
            but we don't reply with a recommendation and you are not billed.
            <br />**Boolean, defaults to true.**"
          first_message:
            "In **Marketplaces**, it's the date and time of the first message
            exchanged between buyer and seller. YYYY-MM-DDTHH:mm:ssZ format
            ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601))<br />
            **Exactly 20 chars, string**."
          messages_exchanged:
            "In **Marketplaces**, should contain the number of messages
            exchanged between buyer and seller up until the order was placed.
            <br />**Number**."
          purchased_at:
            "In **Marketplaces**, it's the date and time the order was closed.
            YYYY-MM-DDTHH:mm:ssZ format ([ISO 8601]
            (https://en.wikipedia.org/wiki/ISO_8601))<br />
            **Exactly 20 chars, string**."
          customer: "Object containing the customer details."
          payment: "Array containing the payment methods."
          billing: "Object containing the billing information."
          shipping: "Object containing the shipping information."
          shopping_cart: "Array containing the items purchased."
          travel: "Object containing the travel and passenger information."
          seller: "Object containing the Marketplace seller information."



      customer:
        title: Customer
        content: |
          This object must be used to send information about the buyer, which
          in most cases is the person logged into your application.

          To send data about the cardholder or the product recipient you must
          use the `billing` and `shipping` objects respectively.

        table:
          id:
            "**Unique** identifier for each customer. Can be anything you like
            (counter, id, e-mail address) as long as it's consistent in future
            orders.<br />**Max. 100 chars, string.**"
          name: "Customer's full name.<br />**Max. 100 chars, string.**"
          tax_id: "Customer's tax id.<br />**Max. 100 chars, string.**"
          dob:
            "Customer's date of birth in YYYY-MM-DD format ([ISO 8601]
            (https://en.wikipedia.org/wiki/ISO_8601)).<br />
            **Exactly 10 chars, string.**"
          phone1:
            "Customer's primary phone number<br />**Max. 100 chars,
            string.**"
          phone2:
            "Customer's secondary phone number<br />**Max. 100 chars,
            string.**"
          email: "Customer's e-mail address<br />**Max. 100 chars, string.**"
          new:
            "Flag indicating if the customer is using a newly created account
            for this purchase.<br />**Boolean.**"
          vip:
            "Flag indicating if the customer is a VIP or frequent buyer.<br
            />**Boolean.**"
          created_at:
            "Customer account creation date, in YYYY-MM-DD format ([ISO 8601]
            (https://en.wikipedia.org/wiki/ISO_8601)).<br />
            **Exactly 10 chars, string**."


      billing:
        title: Billing Address
        content: |
          This object must containg the cardholder information.

        table:
          name:
            "Cardholder's full name.<br />**Max. 100 chars, string.**"
          address1:
            "Cardholder's billing address on file with the bank.<br
            />**Max. 255 chars, string.**"
          address2:
            "Additional cardholder address information.<br />**Max. 255
            chars, string.**"
          city: "Cardholder's city.<br />**Max. 100 chars, string.**"
          state: "Cardholder's state.<br />**Max. 100 chars, string.**"
          zip: "Cardholder's ZIP code.<br />**Max. 100 chars, string.**"
          country:
            "Cardholder's country code ([ISO 3166-2]
            (https://en.wikipedia.org/wiki/ISO_3166-2))<br />
            **Exactly 2 chars, string.**"

      shipping:
        title: Shipping Address
        content: |
          This object must contain the shipping information of the purchase.
          There is no need to send it if this is a service or software
          download.

          
        table:
          name:
            "Recipient's full name.<br />**Max. 100 chars, string.**"
          address1:
            "Recipient's shipping address.<br />**Max. 255 chars, string.**"
          address2:
            "Additional recipient address information.<br />**Max. 255 chars,
            string.**"
          city:
            "Recipient's city.<br />**Max. 100 chars, string.**"
          state:
            "Recipient's state.<br />**Max. 100 chars, string.**"
          zip:
            "Recipient's ZIP code.<br />**Max. 100 chars, string.**"
          country:
            "Recipient's country code ([ISO 3166-2]
            (https://en.wikipedia.org/wiki/ISO_3166-))<br /
            >**Exactly 2 chars, string.**"



      payment:
        title: Payment Methods
        content: |
          This object contains the payment methods used for the purchase. This
          is an array, so if the order was paid using multiple payment methods
          you can send the list over to analysis.

          Currency we support purchases with credit cards, but other payment
          methods will be added in the future.

        table:
          type:
            "Payment type used by the customer. Currently only `credit` is
            supported.<br />**Max. 6 chars, string.**"
          bin:
            "First six digits of the customer's credit card. Used to identify
            the type of card being sent.<br />**Exactly 6 chars, string.**"
          last4:
            "Four last digits of the customer's credit card number.
            <br />**Exactly 4 chars, string.**"
          expiration_date:
            "Card's expiration date under MMYYYY format.
            <br />**Exactly 6 chars, string.**"
          status:
            "The status of the transaction returned by the payment processor.
            Accepts `approved`, `declined` or `pending` if the payment wasn't
            been processed yet.<br />**Max. 8 chars, string.**"


      shopping_cart:
        title: Shopping Cart
        content: |
          This list of objects contains the products added to the order and
          their details.

        table:
          sku:
            "Product or service's [SKU]
            (https://en.wikipedia.org/wiki/Stock-keeping_unit) or inventory id.
            <br />**Max. 100 chars, string.**"
          product_code:
            "Product or service's [UPC]
            (https://en.wikipedia.org/wiki/Universal_Product_Code), barcode or
            secondary id.<br />**Max. 100 chars, string.**"
          category:
            "Category code for the item purchased.<br />
            See our <a href='#'>category codes</a> for more information
            .<br />**Max. 4 digits, number.**"
          name:
            "Name of the product or service.<br />**Max. 100 chars, string.**"
          description:
            "Detailed description of the item.
            <br />**Max. 100 chars, string.**"
          unit_cost:
            "Cost of a single unit of this item.
            <br />**Max. 10 digits, number.**"
          quantity:
            "Number of units purchased.<br />**Max. 10 digits, number.**"
          discount:
            "Discounted amount for this item.<br />**Max. 10 digits, number.**"
          created_at:
            "Date the product was first posted, in YYYY-MM-DD format ([ISO 8601]
            (https://en.wikipedia.org/wiki/ISO_8601)).<br />
            **Exactly 10 chars, string**."

      travel:
        title: Travel
        travel: Travel information
        passengers: Passenger information
        content:
          "Holds data about the transportation and passengers. Travel data is
          divided between `departure` and `return` legs. Passenger data goes
          into the `passengers` array."

        table:
          type:
            "Transportation type. Currently `flight` or `bus` are supported."
          departure: "Object with the **departure** information."
          return: "Object with the **return** information."
          passengers: "Array of objects with the passenger details."
          origin_city: "City of origin.<br />**Max 100 chars, string.**"
          destination_city:
            "City of destination<br />**Max 100 chars, string.**"
          origin_airport:
            "[IATA code]
            (https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code)
            for airport of origin<br />**Exactly 3 chars, string.**"
          destination_airport:
            "[IATA code]
            (https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code)
            code for airport of destination<br />**Exactly 3 chars, string.**"
          date:
            "UTC date and time of departure in YYYY-MM-DDThh:mmZ format
            ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601))
            <br />**Exactly 17 chars, string.**"
          number_of_connections:
            "Number of connections"
          class:
            "Travel class name, like `economy`, `business` and `first`
            <br />**Max. 8 chars, string.**"
          fare_basis:
            "[Fase basis code](https://en.wikipedia.org/wiki/Fare_basis_code).
            <br />**Max 20 chars, string.**"
          name:
            "Passenger's full name<br />**Max 100 chars, string.**"
          document:
            "Document number<br />**Max 100 chars, string.**"
          document_type:
            "Document type. Can be either `passport` or `id`.
            <br />**Max 8 chars, string.**"
          dob:
            "Passenger's date of birth in YYYY-MM-DD format
            ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)).
            <br />**Exactly 10 chars, string.**"
          nationality:
            "Passenger's country of birth
            ([ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2))
            <br />**Exactly 2 chars, string.**"
          loyalty:
            "Object containing loyalty program details"
          loyalty_program:
            "Name of loyalty program.<br />**Max 100 chars, string.**"
          loyalty_category:
            "Category of loyalty program.<br />**Max 20 chars, string.**"
          frequent_passenger:
            "Frequent flyer flag.<br />**Boolean, defaults to `false`.**"
          special_needs:
            "Passenger with special needs.
            <br />**Boolean, defaults to `false`.**"


      seller:
        title: Seller
        content: |
          For **Marketplaces**, these fields are used to pass data about the
          Seller.

        table:
          id:
            "Seller unique identifier within the Marketplace.<br />
            **Max. 100 chars, string**."
          name:
            "Merchant or seller name<br />
            **Max. 100 chars, string**."
          created_at:
            "Seller creation date within the Marketplace, in YYYY-MM-DD format
            ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601))<br />
            **Exatamente 10 chars, string**."


    put:
      title: Update order status
      content: |
        You can update the status of an order using the **PUT** method and
        passing a new `status` and `comments` on the change.

      table:
        status:
          "New status for this transaction. Either `approved`, `declined` or
          `fraud`, when you have identified a fraud or chargeback.
          <br />**Max. 8 chars, string**."
        comments:
          "Reason or comments about the status update.
          <br />**Max. 255 chars, string**."


    get:
      title: Query an order
      content: |
        You can retrieve all the data for an order using the **GET** method.
        The response will include all transactional data about the order,
        including `recommendation`, `score` and current `status`.


  blacklist: 
    title: Blacklist API
    content: |
      The Blacklist is a resource that allows you to block orders that contain
      certain data. Purchases made with this information will be **declined
      automatically** by our platform. You can add an entry to the Blacklist
      permanently or until a certain expiration date.

      With the Blacklist API you can **add**, **update**, **query** and
      **remove** items from the list. Currently you can block **emails** and
      **addresses**.

      Please note that to manage an **address** you need to give it a
      unique id.

    code:
      email_resources: Email Blacklist URLs
      address_resources: Address Blacklist URLs
      email_add: Example of adding an email to the Blacklist
      address_add: Example of adding an address to the Blacklist
      update: Example of an update to the expiration date

    table:
      email_title: Parameters to add an email
      address_title: Parameters to add an address

      email_address:
        "Customer's e-mail address<br />**Max. 100 chars, string.**"
      days_to_expire:
        "Days for this entry to be automatically removed from the Blacklist
        <br />**Number.**"
      address_identifier:
        "**Unique** ID for this address. Is used to reference this record in
        the Blacklist.<br />**Max. 100 chars, string.**"
      address_line_1:
        "Cardholder's billing address on file with the bank.
        <br />**Max. 255 chars, string.**"
      address_line_2:
        "Additional cardholder address information.
        <br />**Max. 255 chars, string.**"
      city:
        "Cardholder's city.<br />**Max. 100 chars, string.**"
      state:
        "Cardholder's state.<br />**Max. 100 chars, string.**"
      zip:
        "Cardholder's ZIP code.<br />**Max. 100 chars, string.**"
      country:
        "Cardholder's country code
        ([ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2))
        <br />**Exactly 2 chars, string.**"

      

    post:
      title: Add an item
      content: |
        To add an entry you must use the `POST` method. Once you add an entry,
        the next transaction will take the new data intro account.
        
        Expiration date is optional. If set, the entry will be removed
        automatically once the deadline is reached. If not, the entry will
        remain in the Blacklist indefinitely.


    put:
      title: Update an expiration date
      content: |
        Updating an item means changing it's **expiration date**. You can move
        up or postpone the expiration date of an entry. It's done through the
        `PUT` method.
        

    get:
      title: Retrieve an item
      content: |
        You can query if an entry is already in the Blacklist. If it has an
        expiration date this value is also returned in the query.


    delete:
      title: Remove an item
      content: |
        To remove an entry from the Blacklist you must use the `DELETE` method.

  responses:
    title: Responses

    codes:
      title: HTTP Codes
      content: |
        Our API uses [HTTP response codes]
        (https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) to
        indicate the result of a request. Successful requests will be replied
        with a `200 OK` code while failed requests will contain `400` or `5xx`
        response codes.

        There is also a `status` parameter is the response body indicating
        whether a request was successful or not.

    errors:
      title: Error responses
      content: |
        Our API's error responses always show you the reason behind the error
        and, when possible, an indication of how to fix it.

        The main reason for an API call to fail is a **validation problem**,
        meaning either **syntax** or the content of the **values**. If it's an
        internal error within Konduto we will reply with a unique ID that can
        be sent to [our support team](mailto:hi@konduto.com) for
        investigation.

      badrequest:
        title: Validation error response
        table:
          where: "Field or object where the error ocurred."
          why: "Causes of the validation error."
          expected: "Expected data."
          found: "Actual received data."
          missing: "Required field missing."
          unknown_field: "Unknown field."

      server:
        title: Internal error response
        table:
          notification: "Server error message"
          error_identifier:
            "Error unique ID, which can be sent to [our support team]
            (mailto:hi@konduto.com) for investigation."
          where: "Field or object where the error ocurred."
          why: "Causes of the validation error."
          expected: "Expected data."
          found: "Actual received data."


      code:
        badrequest: "Example where value was sent as a string"
        server: "Example of internal error"

    orders:
      title: Orders API response
      content: |
        A successful response from the Orders API always returns two objects.

        The `status` field indicates the success or failure of the request, and
        the `order` object contains the data of the order being handled. The
        contents of this object varies accoring to what request is being made.


      post:
        title: Analysis response
        content:
          "The response from our fraud engine returns the following fields
          inside the `order` object:"

        table:
          order: "Object containing the analysis respose."
          status:
            "Request status message. Responds `ok` for successful or `error`
            for failed requests."
          id: "Unique identifier sent in the request"
          visitor: "Visitor identifier sent in the request"
          score:
            "Transaction score between `0` and `1`.<br /><br />
            For transactions that were not analyzed the value `-1` will be
            returned (see **order.analyze** parameter)."
          recommendation:
            "Recommended action to be taken on the order. Can be `APPROVE`,
            `REVIEW` or `DECLINE`.<br /><br />
            For transactions that were not analyzed the value `NONE` will be
            returned (see **order.analyze** parameter)."
          geolocation_title:
            "Object containing the customer's geolocation data"
          device_title: "Object containing the device information collected"
          navigation_title:
            "Object containing the customer's navigation summary"
          device:
            user_id: "Unique user id for this visitor"
            fingerprint: "Browser fingerprint"
            platform: "Customer's device type"
            browser: "Customer's browser"
            language: "Customer's browser language"
            timezone: "Customer's time zone in GMT"
            cookie: "Flag indicating if customer has Cookies enabled"
            javascript: "Flag indicating if customer has JavaScript enabled"
            flash: "Flag indicating if customer has Java enabled"
            ip: "Customer's IP address"
          geolocation:
            city: "Detected city"
            state: "Detected state"
            country: "Detected country"
          navigation:
            session_time: "Time of last session (in minutes)"
            referrer: "Source of the visit"
            time_site_1d:
              "Time user spent on the website in the past day (in minutes)"
            new_accounts_1d:
              "Accounts created by the user in the past day"
            password_resets_1d: "Password resets in the past day"
            sales_declined_1d:
              "Orders declined linked to the user in the past day"
            sessions_1d:
              "User visits (sessions) by the user in the past day"
            time_since_last_sale:
              "Time since the last successul order (in minutes)"
            time_site_7d:
              "Time user spent on the website in the past week (in minutes)"
            time_per_page_7d:
              "Avg. time per page in the past week (in minutes)"
            new_accounts_7d:
              "Accounts created by the user in the past week"
            password_resets_7d: "Password resets in the past week"
            checkout_count_7d: "Shopping cart views in the past week"
            sales_declined_7d:
              "Orders declined linked to the user in the past week"
            sessions_7d:
              "User visits (sessions) by the user in the past week"


      put:
        title: Update response
        content: |
          When you update the status of an order you get a response that
          contains the previous e current order status, i.e. what has just been
          changed. This happens even if the old and the new status are the
          same.

        table:
          old_status: Old order status.
          new_status: New order status.
      get:
        title: Query response
        content: |
          When you query an order you get **all** the data related to that
          purchase, including data sent by the merchant and our analysis.

        table:
          status:
            "Request status message. Responds `ok` for successful or `error`
            for failed requests."
          order: "Object containing the analysis respose."
          id: "Unique identifier sent in the request"
          visitor: "Visitor identifier sent in the request"
          score:
            "Transaction score between `0` and `1`.<br /><br />
            For transactions that were not analyzed the value `-1` will be
            returned (see **order.analyze** parameter)."
          recommendation:
            "Recommended action to be taken on the order. Can be `APPROVE`,
            `REVIEW` or `DECLINE`.<br /><br />
            For transactions that were not analyzed the value `NONE` will be
            returned (see **order.analyze** parameter)."
          total_amount: "Total order amount."
          shipping_amount: "Shipping and handling amount."
          tax_amount: "Taxes amount."
          currency: "Currency code."
          installments: "Number of installments in the payment plan."
          ip: "Customer's IP address."
          created_at:
            "Date and time of the transaction in YYYY-MM-DDThh:mmZ format
            ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601))."
          updated_at:
            "Date and time of the last update on the transaction in
            YYYY-MM-DDThh:mmZ format
            ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601))."
          
          customer_title: "Object containing the customer details."
          customer:
            id: "**Unique** identifier for each customer."
            name: "Customer's full name."
            tax_id: "Customer's tax id."
            dob: "Customer's date of birth in YYYY-MM-DD format."
            phone1: "Customer's primary phone number."
            phone2: "Customer's secondary phone number."
            email: "Customer's e-mail address"
            new:
              "Flag indicating if the customer is using a newly created account
              for this purchase."
            vip:
              "Flag indicating if the customer is a VIP or frequent buyer.*"

          payment_title: "Array containing the payment methods."
          payment:
            type:
              "Payment type used by the customer."
            bin:
              "First six digits of the customer's credit card."
            last4: "Four last digits of the customer's credit card number."
            expiration: "Card's expiration date under MMYYYY format."
            status:
              "The status of the transaction returned by the payment processor."

          billing_title: "Object containing the billing information."
          billing:
            name: "Cardholder's full name."
            address1: "Cardholder's billing address on file with the bank."
            address2: "Additional cardholder address information."
            city: "Cardholder's city."
            state: "Cardholder's state."
            zip: "Cardholder's ZIP code."
            country: "Cardholder's country code."

          shipping_title: "Object containing the shipping information."
          shipping:
            name: "Recipient's full name."
            address1: "Recipient's shipping address."
            address2: "Additional recipient address information."
            city: "Recipient's city."
            state: "Recipient's state."
            zip: "Recipient's ZIP code."
            country: "Recipient's country code."

          shopping_cart_title: "Array containing the items purchased."
          shopping_cart:
            sku: "Product or service's SKU."
            product_code: "Product or service's UPC"
            category: "Category code for the item purchased."
            name: "Name of the product or service."
            description: "Detailed description of the item."
            unit_cost: "Cost of a single unit of this item."
            quantity: "Number of units purchased."
            discount: "Discounted amount for this item."

          travel_title: "Object containing the travel and passenger information."
          travel_leg: "Object containing travel data (each leg)"
          travel_passengers: Object containing passenger data.
          travel:
            type: "Transportation type. Currently `flight` or `bus` are supported."
            departure: "Object with the **departure** information."
            return: "Object with the **return** information."
            passengers: "Array of objects with the passenger details."
            origin_city: "City of origin."
            destination_city:
              "City of destination"
            origin_airport:
              "[IATA code]
              (https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code)
              for airport of origin."
            destination_airport:
              "[IATA code]
              (https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code)
              code for airport of destination."
            date:
              "UTC date and time of departure in YYYY-MM-DDThh:mmZ format
              ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601))."
            number_of_connections: "Number of connections"
            class: "Travel class name, like `economy`, `business` and `first`"
            fare_basis:
              "[Fase basis code](https://en.wikipedia.org/wiki/Fare_basis_code)."
            name: "Passenger's full name."
            document: "Document number."
            document_type: "Document type. Can be either `passport` or `id`."
            dob: "Passenger's date of birth in YYYY-MM-DD format."
            nationality: "Passenger's country of birth."
            loyalty: "Object containing loyalty program details"
            loyalty_program: "Name of loyalty program."
            loyalty_category: "Category of loyalty program."
            frequent_passenger: "Frequent flyer flag."
            special_needs: "Passenger with special needs."
          
          device_title: "Object containing the device information collected"
          device:
            user_id: "Unique user id for this visitor"
            fingerprint: "Browser fingerprint"
            platform: "Customer's device type"
            browser: "Customer's browser"
            language: "Customer's browser language"
            timezone: "Customer's time zone in GMT"
            cookie: "Flag indicating if customer has Cookies enabled"
            javascript: "Flag indicating if customer has JavaScript enabled"
            flash: "Flag indicating if customer has Java enabled"
            ip: "Customer's IP address"

          geolocation_title:
            "Object containing the customer's geolocation data"
          geolocation:
            city: "Detected city"
            state: "Detected state"
            country: "Detected country"
          
          navigation_title:
            "Object containing the customer's navigation summary"
          navigation:
            session_time: "Time of last session (in minutes)"
            referrer: "Source of the visit"
            time_site_1d:
              "Time user spent on the website in the past day (in minutes)"
            new_accounts_1d:
              "Accounts created by the user in the past day"
            password_resets_1d: "Password resets in the past day"
            sales_declined_1d:
              "Orders declined linked to the user in the past day"
            sessions_1d:
              "User visits (sessions) by the user in the past day"
            time_since_last_sale:
              "Time since the last successul order (in minutes)"
            time_site_7d:
              "Time user spent on the website in the past week (in minutes)"
            time_per_page_7d:
              "Avg. time per page in the past week (in minutes)"
            new_accounts_7d:
              "Accounts created by the user in the past week"
            password_resets_7d: "Password resets in the past week"
            checkout_count_7d: "Shopping cart views in the past week"
            sales_declined_7d:
              "Orders declined linked to the user in the past week"
            sessions_7d:
              "User visits (sessions) by the user in the past week"


    blacklist:
      title: Blacklist API response
      content: |
        The Blacklist API response returns the confirmation of the operation
        made in that entry, be it an **addition**, **update**, **query** or
        **removal**. Below you will find the details of each response.

      table:
        status: "Request status. Either `ok` or `error`."
        uri:
          "New resource's address in the Blacklist, for future use."
        expires_at:
          "Date when the entry will be automatically removed from the Blacklist."
        message: "Removal confirmation message."
        email_address: "Email address."
        days_to_expire:
          "Number of days until the entry is automatically removed from the
          Blacklist."
        address_identifier:
          "**Unique** address identifier. Will be used to reference this entry
          in future actions."
        address_line_1: "Cardholder's billing address on file with the bank."
        address_line_2: "Additional cardholder address information."
        city: "Cardholder's city."
        state: "Cardholder's state."
        zip: "Cardholder's ZIP code."
        country: "Cardholder's country code."

      post:
        title: Addition response

      put:
        title: Update response

      get:
        title: Query response

      delete:
        title: Removal response

      code:
        email_example: "Email query response example"
        address_example: "Address query response example"

    table:
      code: Code
      details: Description
      ok: Request is valid and we have a response.
      created: Item was added to the list.
      badrequest:
        "There was a problem with request. The **response body** contains more
        information about the cause., most likely a syntax issue."
      unauthorized: 
        "The API that was used is not valid. Please check the [key format](#)
        and it's value in your dashboard."
      forbidden:
        "There is a problem with your account. Please [get in touch with us]
        (mailto:hi@konduto.com) for more information."
      notfound: The order was not found in our database.
      method: The HTTP method used is not allowed for this resource.
      toomany: 
        "You have reached the limit of permitted requests. Please
        [get in touch with us](mailto:hi@konduto.com) for more information."
      invalid:
        "The address for the request is invalid and the server has closed the
        connection. Please check the URL you are using to send requests."
      server:
        "There was an internal error when processing your request. You should
        [get in touch with us](mailto:hi@konduto.com) for more information."

    code:
      ok: Success
      created: Item was created
      badrequest: Error in request
      unauthorized: Problem with key authentication
      forbidden: Problem with the account
      notfound: Not found
      method: Method does not exist
      toomany: Request limit reached
      invalid: No response
      server: Internal server error

  testing: 
    title: How to test
    content: |
      Our Sandbox environment allows you to get predictable responses from our
      API, so you are able to **simulate** all the scenarios of the integration.

      In Sandbox, the `recommendation` changes according to the **cents** of
      the `total_amount`, following the table below. The `score` will be the
      cents value.

    table:
      amount: Value of the cents
      response: Simulated response

  webhook: 
    title: Notifications (Webhooks)
    content: |
      Webhook notifications are an auxiliary service that allows you to
      automate workflows that depend on changes to the order status. Whenever
      an order changes status we will send a **POST** to a URL specified by
      the merchant.

      From this notification the merchant can move on with their operational
      flow, without needing to query the status of each pending order.

      This automation is meant to integrate our application with yours. Email
      notifications can be set up directly on the Dashboard.


    send:
      title: Notification parameters
      content: |
        Our webhook contains a **JSON** with the order number, time of status
        change, new status and a validation signature.

    receive:
      title: Webhook receipt
      content: |
        We expect the webhook response to confirm that the event was received
        and processed. If a proper receipt is not detected we will try to
        deliver the webhook again.

        You must print a **JSON** in the body of the `HTTP 200` response that
        contains a single value: `{"status":"ok"}`.

        When we see this response we understand that you have received the
        notification and will not try to deliver it again.

    signature:
      title: Calculating the signature
      content: |
        The webhook validation signature ensures the integrity of the message
        and prevents *spoofing*. It is **highly recommended** that you
        calculate and validate the signature of each webhook received.

        The message contains a `signature` field with an [HMAC-SHA-256]
        (https://en.wikipedia.org/wiki/Hash-based_message_authentication_code)
        made by the concatenation of the other notification parameters, and
        using your API private key as secret.

        The fields must be concatenated as such:<br />
        **order_id** + **#** + **timestamp** + **#** + **status**

    code:
      private_key: Defines the private key
      webhook: Original JSON from the webhook
      arr: Transforms JSON into an array
      signature: Stores the webhook signature into $signature
      unset: Removes signature from array
      to_hash: "Transforms array into a string concatenated by #"
      my_hash: Calculates HMAC with the webhook values


    table:
      order_id: "Unique identifier sent by the merchant." 
      timestamp:
        "Date and time of the notification in milliseconds ([Unix time]
        (https://en.wikipedia.org/wiki/Unix_time))."
      status:
        "New status for the order.<br />
        Either `APPROVED`, `PENDING`, `DECLINED`, `CANCELED`, 
        `NOT_AUTHORIZED` or `NOT_ANALYZED`."
      signature:
        "Webhook validation signature. An [HMAC-SHA-256]
        (https://en.wikipedia.org/wiki/Hash-based_message_authentication_code)
        of the fields in the notification.<br />
        _**Check how to calculate the signature below**_."

  examples:
    name: "Mary Jane"
    tax_id: "6253407"
    address1: "123 Main St."
    address2: "Apartment 4"
    phone1: "212-555-1234"
    phone2: "202-555-6789"
    email: "mary.jane@example.com"
    city: "New York City"
    state: "NY"
    country: "US"
    zip: "10460"
    ip: "170.149.100.10"
    product1: "Green T-Shirt"
    description1: "Male Green T-Shirt V Neck"
    product2: "Yellow Socks"
    description2: "Pair of Yellow Socks"
    gmt: "GMT -1"
    lang: "en_US"
    currency: "USD"
    passenger2: "John Smith"
    airport1: GRU
    airport2: SFO
    city1: Sao Paulo
    city2: San Francisco
    comments: "Shipping address confirmed by cardholder."
    seller_name: "Joe's Store"


  tables:
    title: Reference tables
    content: |
      Below you will find a list of supported currency codes and a list of
      product categories.


    currency:
      title: Common currencies
      code:
        title: "Full list of currency codes<br /><br />"
        content:
          "There we have a list of the most common currencies used. You can
          find [the full list of currency codes here]
          (https://en.wikipedia.org/wiki/ISO_4217)."          

      table:
        code: Code
        currency: Currency
        usd: "United States Dollar ($)"
        brl: "Brazilian Real (R$)"
        ars: "Argentine Peso ($)"
        aud: "Australian Dollar ($)"
        cad: "Canadian Dollar ($)"
        clp: "Chilean Peso ($)"
        eur: "Euro (€)"
        gbp: "British pound (£)"
        jpy: "Japanese Yen (¥)"
        mxp: "Mexican Peso ($)"

    categories:
      title: Product categories

      code:
        title: "What are categories?<br /><br />"
        content: 
          "Product categories are important because they tell us what type of
          items the customer is buying (shoes, jewelry or a GPS). Getting a TV
          is very different from getting a book, so categories matter for us.
          <br /><br />
          These are loosely based on Google's [product taxonomy]
          (https://support.google.com/merchants/answer/16008)
          and they represent the main categories in which you can group
          items into.
          <br /><br />
          If you think there is a category missing feel free to contact us at
          <hi@konduto.com> and let us know!"


      table:
        description: Description
        code: Code
        others: Others
        others_not_specified: Other categories not specified
        animals: "Animals & Pet Supplies"
        clothing:
          title: "Clothing & Accessories"
          main: "Clothing"
          accessories: "Clothing Accessories"
          costumes: "Costumes & Accessories"
          handbags: "Handbags, Wallets & Cases"
          handbags_accessories: "Wallet Accessories"
          jewelry: "Jewelry"
          shoe_accessories: "Shoe Accessories"
          shoes: "Shoes"
        arts: "Arts & Entertainment"
        baby: "Baby & Toddler"
        business:
          title: "Business & Industrial"
          advertising: "Advertising & Marketing"
          agriculture: "Agriculture"
          construction: "Construction"
          film: "Film & Television"
          finance: "Finance & Insurance"
          food: "Food Service"
          forestry: "Forestry & Logging"
          machinery: "Heavy Machinery"
          hotel: "Hotel & Hospitality"
          storage: "Industrial Storage"
          law: "Law Enforcement"
          manufacturing: "Manufacturing"
          handling: "Material Handling"
          medical: "Medical"
          mining: "Mining & Quarrying"
          tattoo: "Piercing & Tattooing"
          retail: "Retail"
          science: "Science & Laboratory"
          signage: "Signage"
          safety: "Work Safety Protective Gear"
        cameras:
          title: "Cameras & Optics"
          main: "Cameras & Optics"
          accessories: "Camera & Optic Accessories"
          photography: "Photography"
        electronics:
          title: "Electronics"
          3d: "3D Printers"
          audio: "Audio"
          circuit: "Circuit Components"
          comm: "Communications"
          components: "Components"
          computers: "Computers"
          accessories: "Electronics Accessories"
          gps: "GPS"
          gps_accessories: "GPS Accessories"
          networking: "Networking"
          print: "Print, Copy, Scan & Fax"
          print_accessories: "Print, Copy, Scan & Fax Accessories"
          video: "Video"
          consoles: "Video Game Consoles"
          consoles_accessories: "Video Game Consoles Accessories"
        food: "Food, Beverages & Tobacco"
        furniture: "Furniture"
        hardware: "Hardware"
        health: "Health & Beauty"
        garden: "Home & Garden"
        luggage: "Luggage & Bags"
        adult: "Adult"
        weapons: "Weapons"
        office: "Office Supplies"
        religious: "Religious & Ceremonial"
        software:
          title: "Software"
          computer: "Computer Software"
          digital: "Digital Goods & Currency"
          services: "Digital Services"
          games: "Video Game Software"
        sport: "Sporting Goods"
        toys: "Toys & Games"
        vehicles: "Vehicles & Parts"
        books: "Books"
        dvds: "DVDs & Videos"
        magazines: "Magazines & Newspapers"
        music:
          title: "Music"
          cds: "CDs & Vynil"
          instruments: "Musical Instruments"
          digital: "Digital Music"
